    boolean NumberlinkSolver(int[][] map, int[][] LabelLastPosition, int[][] LabelEndPosition, int SolveCounter, int[] FlowDone){
        long t0 = System.currentTimeMillis();
        //RESOLUTION
        if (SolveCounter == this.labelmax && !HaveZeros(map)) {
            Numberlink solved = new Numberlink(this.width,this.height,this.labelmax,map);
            new Image2dViewer(solved.CreateNumberlink());
            long tf = System.currentTimeMillis();
            System.out.println("Computation time : " + (tf - t0) + " ms");
            return true;
        }
        int width = this.width;
        int height = this.height;
        int labelmax = this.labelmax;
        // See auxilary function
        //ô xung quanh
        int[][] VoisinsDisponibles = new int[labelmax][4];
        //số ô trống??
        int[] nombrevoisinslibres= new int[labelmax];
        for (int i=0; i < labelmax ; i++) {
            for (int j=0;j<4;j++) {
                if (voisinestlibre(i,LabelLastPosition[i][0],LabelLastPosition[i][1],j,width,height,map,VoisinsDisponibles)) {
                    nombrevoisinslibres[i]+=1;
                }
            }
        }
        for (int i=0; i<labelmax; i++) {
            if (FlowDone[i]==1) {
                nombrevoisinslibres[i]=MAX;
            }
        }
        //Index with least neighbors
        int ind = IndexOfSmallest(nombrevoisinslibres);
        SolveCounter = 0;
        //left
        if (VoisinsDisponibles[ind][0]==-1) {
            LabelLastPosition[ind][0]-=1;
            map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=ind+1;
            for (int i=0; i<labelmax; i++){
                if (this.CheckSolved(i,LabelEndPosition,LabelLastPosition)) {
                    SolveCounter+=1;
                }
            }
            if (this.CheckSolved(ind, LabelEndPosition, LabelLastPosition)) {
                FlowDone[ind]=1;
            }
            //BACKTRACKING
            if (this.NumberlinkSolver(map, LabelLastPosition, LabelEndPosition, SolveCounter,FlowDone)) {
                return true;
            }
            else {
                map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=0;
                LabelLastPosition[ind][0]+=1;
                FlowDone[ind]=0;
            }
        }
        SolveCounter = 0;
        //down
        if (VoisinsDisponibles[ind][1]==-1 ) {
            LabelLastPosition[ind][1]+=1;
            map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=ind+1;
            for (int i=0; i<labelmax; i++) {
                if (this.CheckSolved(i,LabelEndPosition,LabelLastPosition)) {
                    SolveCounter+=1;
                }
            }
            if (this.CheckSolved(ind, LabelEndPosition, LabelLastPosition)) {
                FlowDone[ind]=1;
            }
            //BACKTRACKING
            if (this.NumberlinkSolver(map, LabelLastPosition, LabelEndPosition, SolveCounter,FlowDone)) {
                return true;
            }
            else {
                map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=0;
                LabelLastPosition[ind][1]-=1;
                FlowDone[ind]=0;
            }
        }
        SolveCounter = 0;
        //right
        if (VoisinsDisponibles[ind][2]==-1 ) {
            LabelLastPosition[ind][0]+=1;
            map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=ind+1;
            for (int i=0; i<labelmax; i++) {
                if (this.CheckSolved(i,LabelEndPosition,LabelLastPosition)) {
                    SolveCounter+=1;
                }
            }
            if (this.CheckSolved(ind, LabelEndPosition, LabelLastPosition)) {
                FlowDone[ind]=1;
            }
            //BACKTRACKING
            if (this.NumberlinkSolver(map, LabelLastPosition, LabelEndPosition, SolveCounter,FlowDone)) {
                return true;
            }
            else {
                map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=0;
                LabelLastPosition[ind][0]-=1;
                FlowDone[ind]=0;
            }
        }
        SolveCounter = 0;
        //up
        if (VoisinsDisponibles[ind][3]==-1 ) {
            LabelLastPosition[ind][1]-=1;
            map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=ind+1;
            for (int i=0; i<labelmax; i++) {
                if (this.CheckSolved(i,LabelEndPosition,LabelLastPosition)) {
                    SolveCounter+=1;
                }
            }
            if (this.CheckSolved(ind, LabelEndPosition, LabelLastPosition)) {
                FlowDone[ind]=1;
            }
            //BACKTRACKING
            if (this.NumberlinkSolver(map, LabelLastPosition, LabelEndPosition, SolveCounter,FlowDone)) {
                return true;
            }
            else {
                map[LabelLastPosition[ind][0]][LabelLastPosition[ind][1]]=0;
                LabelLastPosition[ind][1]+=1;
                FlowDone[ind]=0;
            }
        }

        return false;
    }
